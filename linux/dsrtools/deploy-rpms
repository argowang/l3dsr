#! /bin/bash
#
# Deploy RPMs to Artifactory.
#

set -o nounset
set -o errexit -o errtrace
shopt -s nullglob extglob

function FatalE
{
	local -i status=$1; shift
	trap - EXIT

	(( status != 0 )) || status=1

	echo -e >&2 "Fatal: $@"
	exit $status
}


function Fatal
{
	FatalE 1 "$@"
}


function ErrorHandler
{
	local -i status=$?
	local cmd=$BASH_COMMAND
	local -i line=$1
	trap - EXIT

	FatalE $status \
		"Command '$cmd' on line $line failed with error code $status."
}


function OnExit
{
	local -i ret=$?
	local cmd=$BASH_COMMAND

	if (( $ret != 0 ))
	then
		echo >&2 "Uncaught error running '$cmd' ($ret)."
		exit $ret
	fi

	exit 0
}


function Usage
{
	local usage

	usage="Usage: ${0##*/} "
	usage+="[-a arch] [-c] [-f] [-r repo] [-R] [-s os] [-T _topdir] [-v] "
	usage+="[RPM ...]\n\n"
	usage+="    -a arch		Architecture\n"
	usage+="    -c			Use curl for deploying instead of scp\n"
	usage+="    -f			Treat topdir as a flat directory\n"
	usage+="    -R			Release candidate\n"
	usage+="    -r repo		Repo <${!Repos[@]}> "
	usage+="(${Repo})\n"
	usage+="    -s os		Operating system name\n"
	usage+="    -T _topdir		topdir directory\n\t\t\t"
	usage+="($TopDir)\n"
	usage+="    -v			Enable verbose mode\n\n"
	usage+="    RPM			Path of RPM package files to deploy\n\n"
	usage+="    If no RPMs are given, "
	usage+="will look for them in _topdir/{SRPMS,RPMS}.\n"

	echo -e >&2 "$usage"

	exit $(( $# ? $1+0 : 1 ))
}


function FindOS
{
	local f=$1 rel rela e os ret=1

	rel=$(rpm -q --qf '%{RELEASE}' -p "$f") || return 1

	IFS=. rela=($rel)

	for e in "${rela[@]}"
	do
		case $e in
		EL)	os=4; ret=0; break;;
		el?)	os=${e#el}; ret=0; break;;
		esac
	done

	echo "$os"

	return $ret
}


function FindArch
{
	local arch=$1
	local rpm=$2
	local status=0
	local rpmarch=$(rpm -q --qf '%{ARCH}' -p "$rpm") || \
		Fatal "Failed to determine architecture of '$rpm'."

	if [[ -z $arch ]]
	then
		if [[ $rpmarch != noarch ]]
		then
			echo "$rpmarch"
		else
			echo ""
		fi
		return 0
	fi

	case $rpmarch in
	noarch)
		;;
	i?86)
		case $arch in
		i?86)   [[ $arch < $rpmarch ]] && arch=$rpmarch || true;;
		x86_64) ;;
		*)      status=1;;
		esac
		;;
	x86_64)
		case $arch in
		i?86)   arch=$rpmarch;;
		x86_64) ;;
		*)      status=1;;
		esac
		;;
	*)
		[[ $rpmarch == $arch ]] || status=1
		;;
	esac

	(( status == 0 )) || \
		{ echo "Incompatible architectures found" \
			"('$rpmarch' and '$arch')."; return 1; }

	echo "$arch"
	return 0
}


# Takes 5 variable names and then a list of the RPMs to filter.
# First two are the OS and architecture variables.  Next three are
# the names of the arrays for for putting the source, debug, and
# binary rpms into.  The remaining arguments are the rpms to filter.

function FilterRpms
{
	local osv=$1 archv=$2 srcrpms=$3 dbgrpms=$4 binrpms=$5
	shift 5

	for f in "$@"
	do
		local nos narch cos

		nos=$(FindOS "$f") || \
			Fatal "Not a valid RPM ($f)."

		eval cos=\$$osv
		if [[ -n $cos && -n $nos ]]
		then
			eval [[ $cos == $nos ]] || \
				Fatal "More than one OS found." \
					"('$cos' and '$nos')"
		elif [[ -n $nos ]]
		then
			eval $osv=\$nos
		fi

		case $f in
		*.src.rpm)
			eval $srcrpms+=\(\"\$f\"\)
			;;
		*-debuginfo-*.rpm)
			eval $dbgrpms+=\(\"\$f\"\)
			;;
		*.rpm)
			eval $binrpms+=\(\"\$f\"\)
			narch=$(FindArch "$Arch" "$f") || Fatal "$narch"
			eval $archv=\"\$narch\"
			;;
		*)
			Fatal "An RPM that's not an RPM?!? ($f)"
			;;
		esac
	done
}


function DeployRpms
{
	local repourl=$1; shift
	local scpdir=$1; shift
	local f loc

	for f in "$@"
	do
		local sha1=$(sha1sum "$f" | awk '{print $1}') || \
			Fatal "Cannot determine sha1 of '$f'."
		local url=$repourl/${f##*/}
		local rsha1=$(curl -fs -u "anonymous:" "$url.sha1")

		if [[ "$rsha1" == "$sha1" ]]
		then
			(( !Verbose )) || \
				echo "Skipped '$f': already deployed to '$url'."
			continue
		fi

		if (( Flag_c ))
		then
			loc=$url
			curl -fsS -i -X PUT \
				-u "$DeployerAccount:$DeployerPassword" \
				-H "X-Checksum-Sha1: $sha1" \
				-T "$f" \
				"$url" > /dev/null
		else
			local scppath="$scpdir/${f##*/}"
			loc=$scppath
			scp -P 4443 -- "$f" "$scppath"
		fi

		if (( $? == 0 ))
		then
			(( !Verbose )) || \
				echo "Deployed file '$f' to '$loc'."
		else
			Fatal "Failed to deploy file '$f' to '$loc'."
		fi
	done
}


declare Os= Arch=
declare -a SrcRpms DbgRpms BinRpms
declare TopDir=$(rpm -E '%{_topdir}')
declare -i Flag_c=0 Flag_f=0 Flag_r=0
declare -i Verbose=0
declare opt
declare DeployerAccount=lkt_deployer_headless

declare ArtiRepo=lkt-yum-builds
declare Repo=commit
declare -A Repos=([commit]=1 [component]=1)

while getopts 'a:cfRr:s:T:v?' opt
do
	case $opt in
	a)	Arch=$OPTARG;;
	c)	Flag_c=1;;
	f)	Flag_f=1;;
	R)	ArtiRepo=lkt-yum
		(( Flag_r )) || Repo=latest
		Repos=([latest]=1 [current]=1 [beta]=1 [stable]=1)
		;;
	r)	Flag_r=1; Repo=$OPTARG;;
	s)	Os=$OPTARG;;
	T)	TopDir=$OPTARG;;
	v)	Verbose=1;;
	\?)	Usage 0;;
	esac
done
shift $((OPTIND - 1))

if (( $# == 0 ))
then
	[[ -n $TopDir ]] || Fatal "Cannot determine _topdir."
	[[ -d $TopDir ]] || Fatal "The path '$TopDir' is not a directory."

	declare -a rpms
	if (( Flag_f ))
	then
		rpms=($TopDir/*.rpm)
	else
		rpms=($TopDir/RPMS/*/*.rpm)
		rpms+=($TopDir/SRPMS/*.rpm)
	fi

	((${#rpms[@]} != 0)) || Fatal "Failed to find rpm files."

	declare Rpms=("${rpms[@]}")
	unset rpms
else
	declare Rpms=("$@")
fi

declare BaseRepoURL=http://artifactory.ops.yahoo.com:4080/artifactory/$ArtiRepo
declare BaseRepoScp=artifactory-ssh-proxy.corp.yahoo.com:/$ArtiRepo

if (( Flag_c ))
then
	[[ -n ${DeployerPassword-} ]] || \
		Fatal "Environment variable '\$DeployerPassword' is not set."
fi

(( ${Repos[$Repo]:-0} )) || \
	Fatal "Repo '$Repo' not one of '${!Repos[@]}'."

declare vOS vArch dontcare
[[ -z $Os ]] && vOs=Os || vOs=dontcare
[[ -z $Arch ]] && vArch=Arch || vArch=dontcare

FilterRpms "$vOs" "$vArch" SrcRpms DbgRpms BinRpms "${Rpms[@]}"

[[ -n $Os ]] || \
	Fatal "Cannot determine OS.  Must specify by setting -s."

(( ${#DbgRpms[@]} + ${#BinRpms[@]} == 0 )) || [[ -n $Arch ]] || \
	Fatal "Cannot determine architecture.  Must specify by setting -a."

# Add the Server variant to make the OS component appear more Red Hat like.
case $Os in
[4-7]) Os="${Os}Server";;
esac

(( !${#SrcRpms[@]} )) || \
	DeployRpms \
		"$BaseRepoURL/$Os/$Repo/Source/Packages" \
		"$BaseRepoScp/$Os/$Repo/Source/Packages" \
		"${SrcRpms[@]}"

(( !${#DbgRpms[@]} )) || \
	DeployRpms \
		"$BaseRepoURL/$Os/$Repo/$Arch-debug/Packages" \
		"$BaseRepoScp/$Os/$Repo/$Arch-debug/Packages" \
		"${DbgRpms[@]}"

(( !${#BinRpms[@]} )) || \
	DeployRpms \
		"$BaseRepoURL/$Os/$Repo/$Arch/Packages" \
		"$BaseRepoScp/$Os/$Repo/$Arch/Packages" \
		"${BinRpms[@]}"
